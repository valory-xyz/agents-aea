package main

import (
  "fmt"
  "os"
  "encoding/binary"
  proto "github.com/golang/protobuf/proto"
  "math"
  "time"
)

func send(pipe *os.File, data []byte) error {
  size := uint32(len(data))
  buf := make([]byte, 4)
  binary.BigEndian.PutUint32(buf, size)
  _, err := pipe.Write(buf)
  if err != nil {
    return err
  }
  _, err = pipe.Write(data)
  return err
}

func receive(pipe *os.File) ([]byte, error) {
  buf := make([]byte, 4)
  pipe.Read(buf)
  size := binary.BigEndian.Uint32(buf)
  fmt.Println("[go] received size", size)

  buf = make([]byte, size)
  _, err := pipe.Read(buf)
  return buf, err
}

func sendEnvelope(pipe *os.File, envelope *Envelope) error {
  data, err := proto.Marshal(envelope)
  if err != nil {
    fmt.Println("[go] Error when serializing envelope", envelope, ":", err)
    return err
  }
  return send(pipe, data)
}

func receiveEnvelope(pipe *os.File) (*Envelope, error) {
  envelope := &Envelope{}
  data, err := receive(pipe)
  if err != nil {
    fmt.Println("[go] Error while receiving data :", err)
    return envelope, err
  }
  err = proto.Unmarshal(data, envelope)
  return envelope, err
}

func main() {
  fmt.Println("[go] starting...")

  msgin_path  := os.Getenv("AEA_TO_NOISE")
  msgout_path := os.Getenv("NOISE_TO_AEA")

  fmt.Println("[go] opening pipes", msgout_path, ",", msgin_path,"...")
  msgout, erro := os.OpenFile(msgout_path, os.O_WRONLY, os.ModeNamedPipe)
  msgin,  erri := os.OpenFile(msgin_path, os.O_RDONLY, os.ModeNamedPipe)

  if erri != nil || erro != nil {
    fmt.Println("[go] error when opening pipes", erri, erro)
    os.Exit(-1)
  }
  
  envlp := &Envelope{"none", "golang", "fetchai/default:0.1.0", []byte("\x08\x01*\x07\n\x05Damn I look guuuuuuod"), ""}
  sendEnvelope(msgout, envlp)

  fmt.Println("[go] reading data from py...")
  envelope, _ := receiveEnvelope(msgin)
  fmt.Println("[go] received msg", envelope)

  answer := envelope
  answer.Message = []byte("\x08\x01*\x07\n\x05Damn I look guuuuuuod")
  fmt.Println("[go] sending data", answer, "to py...")
  sendEnvelope(msgout, answer)
  fmt.Println("[go] message sent")

  i := 10

  for {
    answer := envelope
    answer.Message = []byte("\x08\x01*\x07\n\x05Damn I look guuuuuuod")
    //fmt.Println("[go] sending data", answer, "to py...")
    sendEnvelope(msgout, answer)
    fmt.Println("[go] message sent")
    time.Sleep(time.Second)
    i--
    if i == 0 {
      break
    }
  }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pocs/p2p_noise_pipe/envelope.proto

/*
Package envelope is a generated protocol buffer package.

It is generated from these files:
	pocs/p2p_noise_pipe/envelope.proto

It has these top-level messages:
	Envelope
*/

// INFO: Edited
//package envelope 
//import proto "github.com/golang/protobuf/proto"
//import fmt "fmt"
//import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Envelope struct {
	To         string `protobuf:"bytes,1,opt,name=to" json:"to,omitempty"`
	Sender     string `protobuf:"bytes,2,opt,name=sender" json:"sender,omitempty"`
	ProtocolId string `protobuf:"bytes,3,opt,name=protocol_id,json=protocolId" json:"protocol_id,omitempty"`
	Message    []byte `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Uri        string `protobuf:"bytes,5,opt,name=uri" json:"uri,omitempty"`
}

func (m *Envelope) Reset()                    { *m = Envelope{} }
func (m *Envelope) String() string            { return proto.CompactTextString(m) }
func (*Envelope) ProtoMessage()               {}
func (*Envelope) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Envelope) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *Envelope) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *Envelope) GetProtocolId() string {
	if m != nil {
		return m.ProtocolId
	}
	return ""
}

func (m *Envelope) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Envelope) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func init() {
	proto.RegisterType((*Envelope)(nil), "Envelope")
}

func init() { proto.RegisterFile("envelope.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 157 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2a, 0xc8, 0x4f, 0x2e,
	0xd6, 0x2f, 0x30, 0x2a, 0x88, 0xcf, 0xcb, 0xcf, 0x2c, 0x4e, 0x8d, 0x2f, 0xc8, 0x2c, 0x48, 0xd5,
	0x4f, 0xcd, 0x2b, 0x4b, 0xcd, 0xc9, 0x2f, 0x48, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0xaa,
	0xe7, 0xe2, 0x70, 0x85, 0x8a, 0x08, 0xf1, 0x71, 0x31, 0x95, 0xe4, 0x4b, 0x30, 0x2a, 0x30, 0x6a,
	0x70, 0x06, 0x31, 0x95, 0xe4, 0x0b, 0x89, 0x71, 0xb1, 0x15, 0xa7, 0xe6, 0xa5, 0xa4, 0x16, 0x49,
	0x30, 0x81, 0xc5, 0xa0, 0x3c, 0x21, 0x79, 0x2e, 0x6e, 0xb0, 0xe6, 0xe4, 0xfc, 0x9c, 0xf8, 0xcc,
	0x14, 0x09, 0x66, 0xb0, 0x24, 0x17, 0x4c, 0xc8, 0x33, 0x45, 0x48, 0x82, 0x8b, 0x3d, 0x37, 0xb5,
	0xb8, 0x38, 0x31, 0x3d, 0x55, 0x82, 0x45, 0x81, 0x51, 0x83, 0x27, 0x08, 0xc6, 0x15, 0x12, 0xe0,
	0x62, 0x2e, 0x2d, 0xca, 0x94, 0x60, 0x05, 0x6b, 0x01, 0x31, 0x93, 0xd8, 0xc0, 0xfa, 0x8c, 0x01,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xaf, 0x62, 0x87, 0x61, 0xad, 0x00, 0x00, 0x00,
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
